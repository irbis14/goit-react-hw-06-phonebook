{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactsItem/ContactsItem.module.css","components/Contacts/Contacts.module.css","redux/app-actions.js","redux/app-reducer.js","redux/persist.js","redux/store.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/Contacts/Contacts.js","components/ContactsItem/ContactsItem.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","newContact","payload","id","uuidv4","name","number","onChangeFilter","deleteContact","INITIAL_STATE","items","filter","createReducer","actions","state","contact","_","contactsReducer","combineReducers","appPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contacts","persistReducer","devTools","process","persistor","persistStore","ContactForm","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","find","oldContact","toLowerCase","alert","reset","className","styles","form","onSubmit","this","label","htmlFor","input","type","pattern","title","required","onChange","button","Component","connect","dispatch","Filter","filter__container","Contacts","children","list","ContactsItem","onDeleteContact","map","item","list__item","button__delete","onClick","proptypes","PropTypes","shape","string","isRequired","func","filterContact","normalizedFilter","includes","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.117768e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__MF53B\",\"label\":\"Filter_label__1_bAC\",\"input\":\"Filter_input__2BgZj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list__item\":\"ContactsItem_list__item__1RoW2\",\"button__delete\":\"ContactsItem_button__delete__1qM2M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__VoNE7\"};","import { createAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuidv4 } from \"uuid\";\n// import actionTypes from \"./app-types\";\n\nexport const addContact = createAction(\"app/addContact\", (newContact) => ({\n  payload: {\n    id: uuidv4(),\n    name: newContact.name,\n    number: newContact.number,\n  },\n}));\n\nexport const onChangeFilter = createAction(\"app/onChangeFilter\");\n\nexport const deleteContact = createAction(\"app/deleteContact\");\n\n/* Without Redux Toolkit\n\nexport const addContact = (newContact) => ({\n  type: actionTypes.ADD_CONTACT,\n  payload: {\n    id: uuidv4(),\n    name: newContact.name,\n    number: newContact.number,\n  },\n});\n\nexport const onChangeFilter = (value) => ({\n  type: actionTypes.ON_CHANGE_FILTER,\n  payload: value,\n});\n\nexport const deleteContact = (value) => ({\n  type: actionTypes.DELETE_CONTACT,\n  payload: value,\n}); */\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as actions from \"./app-actions\";\n// import actionTypes from \"./app-types\";\n\nconst INITIAL_STATE = {\n  contacts: {\n    items: [],\n    filter: \"\",\n  },\n};\n\nconst items = createReducer(INITIAL_STATE.contacts.items, {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filter = createReducer(INITIAL_STATE.contacts.filter, {\n  [actions.onChangeFilter]: (_, { payload }) => payload,\n});\n\nconst contactsReducer = combineReducers({ items, filter });\n\nexport default contactsReducer;\n\n/* Without Redux Toolkit\n\nconst items = (state = INITIAL_STATE.contacts.items, { type, payload }) => {\n  switch (type) {\n    case actionTypes.ADD_CONTACT:\n      return [...state, payload];\n\n    case actionTypes.DELETE_CONTACT:\n      return state.filter((contact) => contact.name !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = INITIAL_STATE.contacts.filter, { type, payload }) => {\n  switch (type) {\n    case actionTypes.ON_CHANGE_FILTER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n */\n","import { getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nexport const appPersistConfig = {\n  key: \"items\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nexport const middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport contactsReducer from \"./app-reducer\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { appPersistConfig, middleware } from \"./persist\";\n// import { createStore, combineReducers } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(appPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n\n/* Without ReduxToolkit\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools()); */\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../redux/app-actions\";\n\nimport styles from \"./ContactForm.module.css\";\n\nconst INITIAL_STATE = {\n  name: \"\",\n  number: \"\",\n};\n\nclass ContactForm extends Component {\n  state = { ...INITIAL_STATE };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (\n      this.props.contacts.find((oldContact) => {\n        return oldContact.name.toLowerCase() === this.state.name.toLowerCase();\n      })\n    ) {\n      alert(`${this.state.name} is already in contacts`);\n    } else {\n      this.props.addContact(this.state);\n    }\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...INITIAL_STATE });\n  };\n\n  render() {\n    return (\n      <form className={styles.form} onSubmit={this.handleSubmit}>\n        <label className={styles.label} htmlFor=\"name\">\n          Name\n          <input\n            className={styles.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={styles.label}>\n          Number\n          <input\n            className={styles.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className={styles.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    contacts: state.contacts.items,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addContact: (newContact) => dispatch(actions.addContact(newContact)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\n\nconst Filter = ({ onChangeFilter }) => {\n  return (\n    <div className={styles.filter__container}>\n      <label htmlFor=\"filter\" className={styles.label}>\n        Find contacts by name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          onChange={onChangeFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  onChangeFilter: PropTypes.func,\n};\n\nexport default Filter;\n","import styles from \"./Contacts.module.css\";\r\n\r\nconst Contacts = ({ children }) => {\r\n  return <ul className={styles.list}>{children}</ul>;\r\n};\r\n\r\nexport default Contacts;\r\n","import PropTypes from \"prop-types\";\nimport styles from \"./ContactsItem.module.css\";\n\nconst ContactsItem = ({ items, onDeleteContact }) => {\n  return items.map((item) => {\n    return (\n      <li key={item.id} className={styles.list__item}>\n        {item.name}: {item.number}\n        <button\n          id={item.id}\n          type=\"button\"\n          className={styles.button__delete}\n          onClick={onDeleteContact}\n        >\n          Delete\n        </button>\n      </li>\n    );\n  });\n};\n\nContactsItem.proptypes = {\n  items: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactsItem;\n","import { connect } from \"react-redux\";\nimport * as actions from \"./redux/app-actions\";\n\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport Contacts from \"./components/Contacts\";\nimport ContactsItem from \"./components/ContactsItem\";\n\nimport \"./App.css\";\n\nconst App = ({ filter, addContact, onChangeFilter, deleteContact }) => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n      <Filter onChangeFilter={onChangeFilter} />\n      <Contacts>\n        <ContactsItem items={filter} onDeleteContact={deleteContact} />\n      </Contacts>\n    </div>\n  );\n};\n\nconst filterContact = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }, props) => {\n  return {\n    filter: filterContact(items, filter),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addContact: (newContact) => dispatch(actions.addContact(newContact)),\n    onChangeFilter: (e) => dispatch(actions.onChangeFilter(e.target.value)),\n    deleteContact: (e) => dispatch(actions.deleteContact(e.target.id)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__I67H8\",\"label\":\"ContactForm_label__bCA3H\",\"input\":\"ContactForm_input__24BBG\",\"button\":\"ContactForm_button__gjWJT\"};"],"sourceRoot":""}